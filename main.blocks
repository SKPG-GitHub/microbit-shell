<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="xh]s1esFH(mqRKb;^~Yj">letter</variable><variable id="zKhl1Z!QVv`A,3j)i/a=">command</variable><variable id=".]PH@~}$4BOE,Y$/Ze$f">num</variable><variable id="q*hiE!eg0iS!uAB)de:V">getdata</variable><variable id=")HV2~y^;`)^2IK*uw{k^">gotdata</variable><variable id="T4R/9O?!I.,({YcU@Jx=">receivedString2</variable><variable id="7G-F~RbEAil?^h=p,aD=">name2</variable><variable id="x`]!=I::fwuKwCV]S~Ii">value2</variable><variable id="/?ZI-(Crb#PZ{O|g={;J">receivedNumber2</variable><variable id="+s_vAsMz}Vu-C48@lzrB">list</variable><variable id="#j=^XJ?~UMkaD3ea__q9">radiogroup</variable></variables><block type="pxt-on-start" id="8S+iWZyBCn-,^j[po]Hx" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="6VJKy4ijqvMdIptw|g$!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let gotdata = false" numlines="1" declaredvars="gotdata"></mutation><next><block type="typescript_statement" id=".xxa2G69H3khJb0bx8Rf" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let getdata = false" numlines="1" declaredvars="getdata"></mutation><next><block type="typescript_statement" id="SyBYU:v|3mxBN/F7Tyt8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let receivedNumber2 = 0" numlines="1" declaredvars="receivedNumber2"></mutation><next><block type="typescript_statement" id="_5z*;+x.xS_!zjc;43T5" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let radiogroup = 0" numlines="1" declaredvars="radiogroup"></mutation><next><block type="typescript_statement" id="{H;%TV$J-CI1?+z)$=AA" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let value2 = 0" numlines="1" declaredvars="value2"></mutation><next><block type="typescript_statement" id="=aZi][ja3qTN=[jU^[oE" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let name2 = &quot;&quot;" numlines="1" declaredvars="name2"></mutation><next><block type="typescript_statement" id="t4vq5AHHi!IwC$(f*)8s" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let receivedString2 = &quot;&quot;" numlines="1" declaredvars="receivedString2"></mutation><next><block type="typescript_statement" id=";:sy,kFYhPunkLGN!-sc" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let command = &quot;&quot;" numlines="1" declaredvars="command"></mutation><next><block type="variables_set" id="M}RkOjGnxQ^!F)S}_*Vb"><field name="VAR" id="+s_vAsMz}Vu-C48@lzrB">list</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_create_with" id="?~y;hA/![V.Zo1|#L4/a"><mutation items="1"/><value name="ADD0"><shadow type="math_number" id="v#h|ha,a!5]CfC#u/Iw%"><field name="NUM">1</field></shadow></value></block></value><next><block type="radio_set_group" id="4Xwx*Q]}!_D=r9qO,g1C"><value name="ID"><shadow type="math_number_minmax"><mutation min="0" max="255"/><field name="SLIDER">0</field></shadow><block type="variables_get" id=")]hrA=`LYYc9GC!^mxGv"><field name="VAR" id="#j=^XJ?~UMkaD3ea__q9">radiogroup</field></block></value><next><block type="serial_redirect_to_usb" id="LQ^Y{rWaX|3tZ_5;Ng{*"><next><block type="serial_setbaudrate" id="Q7CPK=Vs9HjkaAS,BKxc"><field name="rate">BaudRate.BaudRate115200</field><next><block type="function_call" id="t78,x*N@YJ`pMVTP_HhN"><mutation name="new_command" functionid="QB4d%Fm-Ih-ssSdxdZrE"/></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="radio_on_string_drag" id="Zu{55{.apFma+rtjKxSx" x="500" y="20"><value name="HANDLER_DRAG_PARAM_receivedString"><shadow type="argument_reporter_string" id="k~=V{wAIsV/+XBsaG=cf"><field name="VALUE">receivedString</field></shadow></value><statement name="HANDLER"><block type="controls_if" id=":ma~}r?eX5i^?o#uz)1$"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="Gw:oTT!gwWU.?Qukkhb@"><field name="VAR" id="q*hiE!eg0iS!uAB)de:V">getdata</field></block></value><statement name="DO0"><block type="variables_set" id="4!WA]?clcD;0a30~_w[|"><field name="VAR" id=")HV2~y^;`)^2IK*uw{k^">gotdata</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="PW(6oDEx8Zgk3MXK-}!9"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set" id="_c)2Uv(3+uSPkCGl$[MA"><field name="VAR" id="T4R/9O?!I.,({YcU@Jx=">receivedString2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_string" id="]z?4%Fd{m/8)?a^~=K[("><field name="VALUE">receivedString</field></block></value></block></next></block></statement></block></statement></block><block type="radio_on_value_drag" id="[z1i5~|e7jXur8UP+$C#" x="1086" y="20"><value name="HANDLER_DRAG_PARAM_name"><shadow type="argument_reporter_string" id="_u:,@xQ0E4^V:L[=Ba8u"><field name="VALUE">name</field></shadow></value><value name="HANDLER_DRAG_PARAM_value"><shadow type="argument_reporter_number" id="=;s.TyuJ0wBC}8#cbdLl"><field name="VALUE">value</field></shadow></value><statement name="HANDLER"><block type="controls_if" id="ZsF8VWh;_8+nPp`x,#Hb"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="wiYTx.$IxD.N~IfmI(C!"><field name="VAR" id="q*hiE!eg0iS!uAB)de:V">getdata</field></block></value><statement name="DO0"><block type="variables_set" id="~(A):8atIc$~BrpLd$L8"><field name="VAR" id=")HV2~y^;`)^2IK*uw{k^">gotdata</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="1.Sl5/C6X5pU,PMr|]3K"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set" id="|*(.ij9`Oei4@j(4;LQG"><field name="VAR" id="7G-F~RbEAil?^h=p,aD=">name2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_string" id="TT*!zIq~$R(?:_|ZfA!~"><field name="VALUE">name</field></block></value><next><block type="variables_set" id="Ji[3?tR9KwNl(n5d;b`~"><field name="VAR" id="x`]!=I::fwuKwCV]S~Ii">value2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="z3`y=s#@:K?g?A5LmOY2"><field name="VALUE">value</field></block></value></block></next></block></next></block></statement></block></statement></block><block type="radio_on_number_drag" id="K6-=5WNhStX.%}/wqj.#" x="1565" y="20"><value name="HANDLER_DRAG_PARAM_receivedNumber"><shadow type="argument_reporter_number" id="epIAB(stis%YxSv(Zv30"><field name="VALUE">receivedNumber</field></shadow></value><statement name="HANDLER"><block type="controls_if" id="B{5$GqMenG@`h)hm:q|0"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="+`(5!aziwEX(5{]+Hv!$"><field name="VAR" id="q*hiE!eg0iS!uAB)de:V">getdata</field></block></value><statement name="DO0"><block type="variables_set" id="KDF^enf*bchx3tYNjI]Y"><field name="VAR" id=")HV2~y^;`)^2IK*uw{k^">gotdata</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="A)+U8:VLVl#7f#+9]KJ$"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set" id=".%|y?RCJz}0Ds*cjDN#x"><field name="VAR" id="/?ZI-(Crb#PZ{O|g={;J">receivedNumber2</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="0hl{TZOI.k)@V]wRFeG/"><field name="VALUE">receivedNumber</field></block></value></block></next></block></statement></block></statement></block><block type="serial_on_data_received" id="eSed{HMohgNB)##hl.GQ" x="2151" y="20"><value name="delimiters"><shadow type="serial_delimiter_conv" id="H/BNJmS6x/N{i8c[[YN0"><field name="del">Delimiters.SemiColon</field></shadow></value><statement name="HANDLER"><block type="typescript_statement" id="]%=#ngz:kRG;V{X2j|Ym" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="pause(100)" numlines="1"></mutation><next><block type="variables_set" id="q@==cK:H$F;g{sUjSS[T"><field name="VAR" id=".]PH@~}$4BOE,Y$/Ze$f">num</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="+h4z$w4VtHiHO[ro@3:4"><field name="BOOL">TRUE</field></block></value><next><block type="typescript_statement" id="6coym*MkKa+NLM##BSs8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="command = command.toLowerCase()" numlines="1"></mutation><next><block type="typescript_statement" id="w0a8%5wf0EAOY+=~sL,|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (command) {" line1="        case &quot;help&quot;:" line2="            serial.writeString(&quot;&quot; + " line3="            &quot;\r\nList of commands:\r\n\r\nBasic commands:\r\n&quot; + " line4="            &quot;\r\nhelp - shows a list of commands&quot; + " line5="            &quot;\r\ninfo - shows info about this device&quot; + " line6="            &quot;\r\nreset - restarts the device\r\n\r\nPin commands:\r\n&quot; + " line7="            &quot;\r\npin-read - [pinNumber] - shows the Analog and Digital values the pin has on the device - ex: 'pin-read 12;'\r\n\r\nRadio commands:\r\n&quot; +" line8="            &quot;\r\nscan-groups - checks which radio groups send data (currently)&quot; +" line9="            &quot;\r\nset-group - [groupNumber] - sets the radio group number - ex: 'set-group 5;'&quot;)" line10="            break" line11="         case &quot;info&quot;:" line12="            serial.writeString(&quot;&quot; + " line13="            &quot;\r\nShell Version: v1.0.0-alpha.4&quot; + " line14="            &quot;\r\nRadio Group: &quot; + radiogroup +" line15="            &quot;\r\nDevice Name: &quot; + control.deviceName() + " line16="            &quot;\r\nDevice Serial Number: &quot; + control.deviceSerialNumber() + " line17="            &quot;\r\nTime Elapsed Since Boot: &quot; + control.millis() / 1000 + &quot; s&quot; + " line18="            &quot;\r\nDevice Temperature: &quot; + input.temperature() + &quot;C, &quot; + (input.temperature() * 1.8 + 32) + &quot;F&quot;)" line19="            break" line20="        case &quot;reset&quot;:" line21="            serial.writeString(&quot;&quot; + (&quot;\r\nTHE MICRO:BIT WILL RESET DON'T TOUCH ANYTHING\r\n&quot;))" line22="            control.reset()" line23="            break" line24="        case &quot;scan-groups&quot;:" line25="            serial.writeLine(&quot;\r\nStarting radio group checking...&quot;)" line26="            pause(3000)" line27="            serial.writeString(&quot;This test will go through groups 0 - 255&quot;)" line28="            serial.writeLine(&quot;\r\nThis test will take 10-15 minutes (some types of data could be empty)&quot;)" line29="            pause(2000)" line30="            for (let i: number = 0; i &lt;= 255; i++) {" line31="                radio.setGroup(i)" line32="                getdata = true" line33="                pause(3000)" line34="                if (gotdata) {" line35="                    getdata = false" line36="                    gotdata = false" line37="                    list.push(i)" line38="                    serial.writeLine(&quot;Got Data On Group: &quot; + i + " line39="                    &quot; Data in packets: String=&quot; + receivedString2 + " line40="                    &quot; Number=&quot; + receivedNumber2 + &quot; Variable.Name=&quot; + name2 + &quot; Variable.Value=&quot; + value2)" line41="                } else {" line42="                    serial.writeLine(&quot;Tested Group: &quot; + i + &quot; No Data&quot;)" line43="                }" line44="                receivedString2 = &quot;&quot;" line45="                receivedNumber2 = 0" line46="                name2 = &quot;&quot;" line47="                value2 = 0" line48="            }" line49="            serial.writeString(&quot;All groups that sent data: &quot;)" line50="            for (let j: number = 1; j &lt; list.length + 1; j++) {" line51="                serial.writeString(list.get(j).toString() + &quot;, &quot;)" line52="            }" line53="            radiogroup = 0" line54="            break" line55="        default:" line56="            if (command.includes(&quot;pin-read &quot;)) {" line57="                let pin: string = command.replace(&quot;pin-read &quot;, &quot;&quot;)" line58="                switch (pin) {" line59="                    case &quot;0&quot;:" line60="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN0: &quot; + pins.analogReadPin(AnalogPin.P0) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P0))" line61="                        break" line62="                    case &quot;1&quot;:" line63="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN1: &quot; + pins.analogReadPin(AnalogPin.P1) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P1))" line64="                        break" line65="                    case &quot;2&quot;:" line66="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN2: &quot; + pins.analogReadPin(AnalogPin.P2) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P2))" line67="                        break" line68="                    case &quot;3&quot;:" line69="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN3: &quot; + pins.analogReadPin(AnalogPin.P3) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P3))" line70="                        break" line71="                    case &quot;4&quot;:" line72="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN4: &quot; + pins.analogReadPin(AnalogPin.P4) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P4))" line73="                        break" line74="                    case &quot;5&quot;:" line75="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN5: &quot; + pins.analogReadPin(AnalogPin.P5) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P5))" line76="                        break" line77="                    case &quot;6&quot;:" line78="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN6: &quot; + pins.analogReadPin(AnalogPin.P6) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P6))" line79="                        break" line80="                    case &quot;7&quot;:" line81="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN7: &quot; + pins.analogReadPin(AnalogPin.P7) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P7))" line82="                        break" line83="                    case &quot;8&quot;:" line84="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN8: &quot; + pins.analogReadPin(AnalogPin.P8) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P8))" line85="                        break" line86="                    case &quot;9&quot;:" line87="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN9: &quot; + pins.analogReadPin(AnalogPin.P9) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P9))" line88="                        break" line89="                    case &quot;10&quot;:" line90="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN10: &quot; + pins.analogReadPin(AnalogPin.P10) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P10))" line91="                        break" line92="                    case &quot;11&quot;:" line93="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN11: &quot; + pins.analogReadPin(AnalogPin.P11) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P11))" line94="                        break" line95="                    case &quot;12&quot;:" line96="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN12: &quot; + pins.analogReadPin(AnalogPin.P12) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P12))" line97="                        break" line98="                    case &quot;13&quot;:" line99="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN13: &quot; + pins.analogReadPin(AnalogPin.P13) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P13))" line100="                        break" line101="                    case &quot;14&quot;:" line102="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN14: &quot; + pins.analogReadPin(AnalogPin.P14) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P14))" line103="                        break" line104="                    case &quot;15&quot;:" line105="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN15: &quot; + pins.analogReadPin(AnalogPin.P15) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P15))" line106="                        break" line107="                    case &quot;16&quot;:" line108="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN16: &quot; + pins.analogReadPin(AnalogPin.P16) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P16))" line109="                        break" line110="                    case &quot;17&quot;:" line111="                        serial.writeString(&quot;\r\nPIN17 is a 3V supply&quot;)" line112="                        break" line113="                    case &quot;18&quot;:" line114="                        serial.writeString(&quot;\r\nPIN18 is a 3V supply&quot;)" line115="                        break" line116="                    case &quot;19&quot;:" line117="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN19: &quot; + pins.analogReadPin(AnalogPin.P19) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P19))" line118="                        break" line119="                    case &quot;20&quot;:" line120="                        serial.writeString(&quot;\r\nAnalog / Digital Value on PIN20: &quot; + pins.analogReadPin(AnalogPin.P20) + &quot; / &quot; + pins.digitalReadPin(DigitalPin.P20))" line121="                        break" line122="                    default:" line123="                        serial.writeString(&quot;\r\nError: wrong pin number/index!&quot;)" line124="                        break" line125="                }" line126="            } else if (command.includes(&quot;set-group &quot;)) {" line127="                let gnumber: string = command.replace(&quot;set-group &quot;, &quot;&quot;)" line128="                radiogroup = gnumber.charAt(0).charCodeAt(0)" line129="                radio.setGroup(radiogroup)" line130="                serial.writeString(&quot;\r\nThe radio group number was set to &quot; + gnumber)" line131="            } else {" line132="                serial.writeString(&quot;&quot; + &quot;\r\nError: command '&quot; + command + &quot;' not found!&quot;)" line133="            }" line134="            break" line135="    }" numlines="136"></mutation><next><block type="variables_set" id="Et9!4a=axtAgwL5,e}U*"><field name="VAR" id="zKhl1Z!QVv`A,3j)i/a=">command</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="v=QtC(@yiq%[O%G$6j21"><field name="TEXT"/></block></value><next><block type="function_call" id="a95c#@x*=%.mXUWVu+j/"><mutation name="new_command" functionid="QB4d%Fm-Ih-ssSdxdZrE"/></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="P.4(bQ~5GTdTpE4o[W?V" x="3731" y="20"><mutation name="new_command" functionid="QB4d%Fm-Ih-ssSdxdZrE"/><field name="function_name">new_command</field><statement name="STACK"><block type="controls_if" id="DXQAnW$eK,zX$V.ti.`5"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="gl5t^W^`~4ifrYVPgVQ!"><field name="VAR" id=".]PH@~}$4BOE,Y$/Ze$f">num</field></block></value><statement name="DO0"><block type="serial_writestring" id="U=9xE2tv)kE)u[.cy7;:"><value name="text"><block type="text_join" id="Da_[z?LG:aa7EYPY6.Fo"><mutation items="3"/><value name="ADD0"><shadow type="text"><field name="TEXT"/></shadow><block type="typescript_expression" id="=O0~HG*:{ET*w45q2Ph8" editable="false"><field name="EXPRESSION">"\r\n"</field></block></value><value name="ADD1"><shadow type="text"><field name="TEXT"/></shadow><block type="control_device_name" id="l+krfHk)Yq1oJAX[HohL"/></value><value name="ADD2"><shadow type="text" id="Y}a/oJZTCCV,`x:g_t^."><field name="TEXT"> ~ % </field></shadow></value></block></value></block></statement><statement name="ELSE"><block type="serial_writestring" id="@ad?JTrYgMk`^{u)}?oA"><value name="text"><block type="text_join" id="4pj{%h(c8a,hcH_rENKr"><mutation items="2"/><value name="ADD0"><shadow type="text"><field name="TEXT"/></shadow><block type="control_device_name" id="0cQS#V]tTR`C-7elc%.h"/></value><value name="ADD1"><shadow type="text" id="J]%;%]F+e4j1UQ5KoZ1z"><field name="TEXT"> ~ % </field></shadow></value></block></value></block></statement></block></statement></block><block type="device_forever" id="wklz.I79hc~jmvV`I=S$" x="4527" y="20"><statement name="HANDLER"><block type="variables_set" id="$L$mJgKLf,GF2i=pRhE|"><field name="VAR" id="xh]s1esFH(mqRKb;^~Yj">letter</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="serial_read_buffer" id="ibVD+LO|lsHFD;rJ3DrM"/></value><next><block type="serial_writestring" id="Xl;%O}CpDXv2HIsKc.yt"><value name="text"><block type="variables_get" id="]tq*aAcSKE0R]2{)dmOE"><field name="VAR" id="xh]s1esFH(mqRKb;^~Yj">letter</field></block></value><next><block type="controls_if" id="mjc.=CQYo_qb;])vx3[$"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="Dz1HZ@gJJ8weQnAobmRq"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="kslz?Zzv|1wtTktW+U{y"><field name="VAR" id="xh]s1esFH(mqRKb;^~Yj">letter</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="$`Bu;.l0LCtUfCxQ9u+^"><field name="TEXT">;</field></block></value></block></value><statement name="DO0"><block type="variables_set" id="vBmJA}?`Q?|BWR|F.t]x"><field name="VAR" id="xh]s1esFH(mqRKb;^~Yj">letter</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="0H~p32_8y_D:$~VR867s"><field name="TEXT"/></block></value></block></statement><statement name="ELSE"><block type="variables_set" id="o~_~3z2on.E6$KpT?*/h"><field name="VAR" id="zKhl1Z!QVv`A,3j)i/a=">command</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text_join" id="cd5=r^0@F[j%AQPKmdk!"><mutation items="2"/><value name="ADD0"><shadow type="text"><field name="TEXT"/></shadow><block type="variables_get" id="~Pbelc2|KerFwY`)~NV$"><field name="VAR" id="zKhl1Z!QVv`A,3j)i/a=">command</field></block></value><value name="ADD1"><shadow type="text"><field name="TEXT"/></shadow><block type="variables_get" id="9WgT7vCL(mW=AN8N%nG8"><field name="VAR" id="xh]s1esFH(mqRKb;^~Yj">letter</field></block></value></block></value><next><block type="variables_set" id="aa9x:U;W!xi2%*Ms]l@X"><field name="VAR" id="xh]s1esFH(mqRKb;^~Yj">letter</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="8(u17I}f10WWi5;#[c.9"><field name="TEXT"/></block></value></block></next></block></statement></block></next></block></next></block></statement></block></xml>