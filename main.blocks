<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="Z@;7Itt2@kV8SkC^w2,i">command</variable><variable id=".u.PSj3Qji?$xW%an]g^">num</variable><variable id="+GuuUWcMc#5wwFXj,S){">letter</variable></variables><block type="pxt-on-start" id="5::hu4OfH~j?cC5[6JHj" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="Q2GQ*s%nR95NDd:Fy*s|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let command = &quot;&quot;" numlines="1" declaredvars="command"></mutation><next><block type="radio_set_group" id="C5)huf14(4Vv7L;0=nPZ"><value name="ID"><shadow type="math_number_minmax" id="g2T-ZDI6^+d5VDc~8PKN"><mutation min="0" max="255" label="Number" precision="0"/><field name="SLIDER">0</field></shadow></value><next><block type="serial_redirect_to_usb" id="`It+!5wI1qya1(%h]${|"><next><block type="serial_setbaudrate" id="?!R$=In{EP6Kq.Ue2wk1"><field name="rate">BaudRate.BaudRate115200</field><next><block type="function_call" id="Y;WsZwmHL]Y/juicu6xl"><mutation name="new_command" functionid="F6ayI#H`MrO,Nm/h1lhj"/><next><block type="variables_set" id="V)n@efGwP-][(MXnT*d!"><field name="VAR" id=".u.PSj3Qji?$xW%an]g^">num</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="knR@P)@W5}YBbn.vYtB7"><field name="BOOL">TRUE</field></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="serial_on_data_received" id="uit.j}x/)lzD8}`z+z_l" x="421" y="20"><value name="delimiters"><shadow type="serial_delimiter_conv" id="-aM~0j!@c2P9[[w7-jEw"><field name="del">Delimiters.SemiColon</field></shadow></value><statement name="HANDLER"><block type="typescript_statement" id="!X,-,$,hv0WPI3*e3`3/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="pause(100)" numlines="1"></mutation><next><block type="typescript_statement" id="w;wnOAw/}+eX]M(f]twr" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="command = command.toLowerCase()" numlines="1"></mutation><next><block type="typescript_statement" id="u,$F@DxUoY[vP9jl4i+6" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (command) {" line1="        case &quot;help&quot;:" line2="            serial.writeString(&quot;&quot; + " line3="            &quot;\r\nList of commands:&quot; + " line4="            &quot;\r\nhelp - shows a list of commands&quot; + " line5="            &quot;\r\ninfo - shows info about this device&quot; + " line6="            &quot;\r\nabout - shows info about the flashed program on this device&quot; + " line7="            &quot;\r\nreset - restarts the device&quot; + " line8="            &quot;\r\npinread - [pinNumber] - shows the voltage the pin has on the device - ex: 'pinread 12;'&quot; +" line9="            &quot;\r\ngetgroup - checks which radio groups send data (currently)&quot;)" line10="            break" line11="         case &quot;info&quot;:" line12="            serial.writeString(&quot;&quot; + " line13="            &quot;\r\nInfo about this device:&quot; + " line14="            &quot;\r\nDevice Name: &quot; + control.deviceName() + " line15="            &quot;\r\nDevice Serial Number: &quot; + control.deviceSerialNumber() + " line16="            &quot;\r\nTime Elapsed Since Boot: &quot; + control.millis() / 1000 + &quot; s&quot; + " line17="            &quot;\r\nShell Version: v1.0.0-alpha.1&quot; + " line18="            &quot;\r\nDevice Temperature: &quot; + input.temperature() + &quot;C, &quot; + (input.temperature() * 1.8 + 32) + &quot;F&quot;)" line19="            break" line20="        case &quot;about&quot;:" line21="            serial.writeString(&quot;&quot; + &quot;\r\nThis is a shell, made using the Makecode editor with Javascript.&quot; + " line22="            &quot;\r\nAnd the thing is it runs on a micro:bit.&quot;)" line23="            break" line24="        case &quot;reset&quot;:" line25="            serial.writeString(&quot;&quot; + (&quot;\r\nTHE MICRO:BIT WILL RESET DON'T TOUCH ANYTHING\r\n&quot;))" line26="            control.reset()" line27="            break" line28="        case &quot;getgroup&quot;:" line29="" line30="            break" line31="        default:" line32="            if (command.includes(&quot;pinread &quot;)) {" line33="                let pin: string = command.replace(&quot;pinread &quot;, &quot;&quot;)" line34="                switch (pin) {" line35="                    case &quot;0&quot;:" line36="                        serial.writeString(&quot;\r\nVoltage on PIN0: &quot; + pins.analogReadPin(AnalogPin.P0))" line37="                        break" line38="                    case &quot;1&quot;:" line39="                        serial.writeString(&quot;\r\nVoltage on PIN1: &quot; + pins.analogReadPin(AnalogPin.P1))" line40="                        break" line41="                    case &quot;2&quot;:" line42="                        serial.writeString(&quot;\r\nVoltage on PIN2: &quot; + pins.analogReadPin(AnalogPin.P2))" line43="                        break" line44="                    case &quot;3&quot;:" line45="                        serial.writeString(&quot;\r\nVoltage on PIN3: &quot; + pins.analogReadPin(AnalogPin.P3))" line46="                        break" line47="                    case &quot;4&quot;:" line48="                        serial.writeString(&quot;\r\nVoltage on PIN4: &quot; + pins.analogReadPin(AnalogPin.P4))" line49="                        break" line50="                    case &quot;5&quot;:" line51="                        serial.writeString(&quot;\r\nVoltage on PIN5: &quot; + pins.analogReadPin(AnalogPin.P5))" line52="                        break" line53="                    case &quot;6&quot;:" line54="                        serial.writeString(&quot;\r\nVoltage on PIN6: &quot; + pins.analogReadPin(AnalogPin.P6))" line55="                        break" line56="                    case &quot;7&quot;:" line57="                        serial.writeString(&quot;\r\nVoltage on PIN7: &quot; + pins.analogReadPin(AnalogPin.P7))" line58="                        break" line59="                    case &quot;8&quot;:" line60="                        serial.writeString(&quot;\r\nVoltage on PIN8: &quot; + pins.analogReadPin(AnalogPin.P8))" line61="                        break" line62="                    case &quot;9&quot;:" line63="                        serial.writeString(&quot;\r\nVoltage on PIN9: &quot; + pins.analogReadPin(AnalogPin.P9))" line64="                        break" line65="                    case &quot;10&quot;:" line66="                        serial.writeString(&quot;\r\nVoltage on PIN10: &quot; + pins.analogReadPin(AnalogPin.P10))" line67="                        break" line68="                    case &quot;11&quot;:" line69="                        serial.writeString(&quot;\r\nVoltage on PIN11: &quot; + pins.analogReadPin(AnalogPin.P11))" line70="                        break" line71="                    case &quot;12&quot;:" line72="                        serial.writeString(&quot;\r\nVoltage on PIN12: &quot; + pins.analogReadPin(AnalogPin.P12))" line73="                        break" line74="                    case &quot;13&quot;:" line75="                        serial.writeString(&quot;\r\nVoltage on PIN13: &quot; + pins.analogReadPin(AnalogPin.P13))" line76="                        break" line77="                    case &quot;14&quot;:" line78="                        serial.writeString(&quot;\r\nVoltage on PIN14: &quot; + pins.analogReadPin(AnalogPin.P14))" line79="                        break" line80="                    case &quot;15&quot;:" line81="                        serial.writeString(&quot;\r\nVoltage on PIN15: &quot; + pins.analogReadPin(AnalogPin.P15))" line82="                        break" line83="                    case &quot;16&quot;:" line84="                        serial.writeString(&quot;\r\nVoltage on PIN16: &quot; + pins.analogReadPin(AnalogPin.P16))" line85="                        break" line86="                    case &quot;17&quot;:" line87="                        serial.writeString(&quot;\r\nPIN17 is a 3V supply&quot;)" line88="                        break" line89="                    case &quot;18&quot;:" line90="                        serial.writeString(&quot;\r\nPIN18 is a 3V supply&quot;)" line91="                        break" line92="                    case &quot;19&quot;:" line93="                        serial.writeString(&quot;\r\nVoltage on PIN19: &quot; + pins.analogReadPin(AnalogPin.P19))" line94="                        break" line95="                    case &quot;20&quot;:" line96="                        serial.writeString(&quot;\r\nVoltage on PIN20: &quot; + pins.analogReadPin(AnalogPin.P20))" line97="                        break" line98="                    default:" line99="                        serial.writeString(&quot;\r\nError: wrong pin number/index!&quot;)" line100="                        break" line101="                }" line102="            } else {" line103="                serial.writeString(&quot;&quot; + &quot;\r\nError: command '&quot; + command + &quot;' not found!&quot;)" line104="            }" line105="            break" line106="    }" numlines="107"></mutation><next><block type="variables_set" id="YnLP:u-n[OnTDWZ?TzAd"><field name="VAR" id="Z@;7Itt2@kV8SkC^w2,i">command</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="%?i,(HN{]*=be+j+X1tZ"><field name="TEXT"/></block></value><next><block type="function_call" id="A5SiJYliJ4/8#P2YUzRq"><mutation name="new_command" functionid="F6ayI#H`MrO,Nm/h1lhj"/></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="n7Tf-q=rPGG/4?`O[UL@" x="1518" y="20"><mutation name="new_command" functionid="F6ayI#H`MrO,Nm/h1lhj"/><field name="function_name">new_command</field><statement name="STACK"><block type="controls_if" id=";Yw+H[?B6~IwZ)(gEa]i"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get" id="Y0/sk*zHm3X)}0IcC86O"><field name="VAR" id=".u.PSj3Qji?$xW%an]g^">num</field></block></value><statement name="DO0"><block type="serial_writestring" id="4062INl2K,TEq*1t=Xrl"><value name="text"><block type="text_join" id="}$5L^1s~+W?qE.(RU{`R"><mutation items="3"/><value name="ADD0"><shadow type="text"><field name="TEXT"/></shadow><block type="typescript_expression" id="LIZ#ky:}o9])crl9}8^0" editable="false"><field name="EXPRESSION">"\r\n"</field></block></value><value name="ADD1"><shadow type="text"><field name="TEXT"/></shadow><block type="control_device_name" id="%#BL1O:66^?)_P@h**Tl"/></value><value name="ADD2"><shadow type="text" id="YSGBtEV/42R]NCMpDSNE"><field name="TEXT"> ~ % </field></shadow></value></block></value></block></statement><statement name="ELSE"><block type="serial_writestring" id="|r-Pg+(.5U!@F,0S1}6d"><value name="text"><block type="text_join" id="yAbwR-plWBk_?P`cH.W*"><mutation items="2"/><value name="ADD0"><shadow type="text"><field name="TEXT"/></shadow><block type="control_device_name" id=",#=:Ygo/24TeL6xOos~|"/></value><value name="ADD1"><shadow type="text" id="5Gc=qQIrQ$)8Y6ywSI/E"><field name="TEXT"> ~ % </field></shadow></value></block></value></block></statement></block></statement></block><block type="device_forever" id="*1M1}fN}!CJQ!EhbA}?=" x="2314" y="20"><statement name="HANDLER"><block type="variables_set" id="1}G=q/5EB9YtC4F^$O_v"><field name="VAR" id="+GuuUWcMc#5wwFXj,S){">letter</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="serial_read_buffer" id="v26kc#8b58{jjNRxO|J2"/></value><next><block type="serial_writestring" id="%Tc;).oyTU|0Mb?o%Ti+"><value name="text"><block type="variables_get" id="}?o6.~_6t7_rvBwi;~d2"><field name="VAR" id="+GuuUWcMc#5wwFXj,S){">letter</field></block></value><next><block type="controls_if" id="Q-89B{:)~{RzEfJ{1Jqg"><mutation else="1"/><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="%%AovWn)E6!hg+!+,Lb_"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="V=MDS8*_;NE+G?$hR^@O"><field name="VAR" id="+GuuUWcMc#5wwFXj,S){">letter</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="Q+H?+UE(e0+UyPr.^JRT"><field name="TEXT">;</field></block></value></block></value><statement name="DO0"><block type="variables_set" id="yt,KL)6~0:.,zA489,6e"><field name="VAR" id="+GuuUWcMc#5wwFXj,S){">letter</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="^#Gl)*[c9pJ+qQL(6nlB"><field name="TEXT"/></block></value></block></statement><statement name="ELSE"><block type="variables_set" id="6r]|T`td*0xTvOi3-hl9"><field name="VAR" id="Z@;7Itt2@kV8SkC^w2,i">command</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text_join" id="slfdqzUDrJp5g4y/9do{"><mutation items="2"/><value name="ADD0"><shadow type="text"><field name="TEXT"/></shadow><block type="variables_get" id="HjW)/de*QTL[Q%J5WQ4="><field name="VAR" id="Z@;7Itt2@kV8SkC^w2,i">command</field></block></value><value name="ADD1"><shadow type="text"><field name="TEXT"/></shadow><block type="variables_get" id="LtJ`3H0o*R%-i(pPG*og"><field name="VAR" id="+GuuUWcMc#5wwFXj,S){">letter</field></block></value></block></value><next><block type="variables_set" id="t:2D75%1;r+a%OJS(@o="><field name="VAR" id="+GuuUWcMc#5wwFXj,S){">letter</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="/fcE;Jwa5x@}:id+Q5%B"><field name="TEXT"/></block></value></block></next></block></statement></block></next></block></next></block></statement></block></xml>